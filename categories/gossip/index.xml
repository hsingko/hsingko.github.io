<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gossip on Hugo</title>
    <link>https://hsingko.github.io/categories/gossip/</link>
    <description>Recent content in gossip on Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>[Home](/) &amp;#183; Theme [Simpleness](https://github.com/RainerChiang/simpleness) Powered by [Hugo](https://gohugo.io/)</copyright>
    <lastBuildDate>Fri, 06 Nov 2020 13:27:21 +0800</lastBuildDate><atom:link href="https://hsingko.github.io/categories/gossip/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo折腾笔记</title>
      <link>https://hsingko.github.io/post/hugo%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 06 Nov 2020 13:27:21 +0800</pubDate>
      
      <guid>https://hsingko.github.io/post/hugo%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</guid>
      <description>又开始折腾起博客了，和大多数人一样，我已经折腾了好几次博客了。从wordpress到hexo、hugo，再到blogspot。现在又回归到了hugo，起因是因为今天看到一个特别漂亮的博客所以眼馋了。
主题 说实话，自己搭建博客，最头痛的就是主题了，原因就是选择太多了，试用了一大堆主题之后，最终还是选择了这款classic，简单就是美。 这里顺便记录一下试用过的主题的优缺点，避免以后再踩坑：
1. Anatole @2020-11-06  优点：精致漂亮 缺点：左边的侧栏实在太宽了，占了一半了，看文章的时候都得对着那么一张大脸，实在是太自恋了  2.hyde hyde @2020-11-04  优点：这款其实很不错了，简洁美观，默认字体也不错，接近我理想中的主题 缺点：太像API doc了，写文章的时候感觉就是在写开发文档  3.terminal @2020-11-01  优点：漂亮，惊艳 缺点：太黑了，真的是太黑了  4.console @2020-10-23  优点：简洁美观 缺点：不支持中文，在路径栏会中文会变成URL编码，虽然改改应该能用，但是还是太麻烦了  5.even @2020-09-11  优点：中文支持好，功能是我见过的最丰富的 缺点：太多人用了，容易撞脸；功能丰富的同时，设置也变得很复杂，其实很多东西我永远都用不到  6.diary @2020-10-13  优点：我一开始选择的是这个主题，他在简洁和美观之间做到了比较好的平衡；同样是两栏设计，就比上面的hyde-hyde漂亮得多 缺点：非常可惜，这个主题有bug：封面图会莫名其妙地消失，然后又莫名其妙地出现，作者自己的博客上也有这个问题。另外就是使用了google font api，在国外用当然没什么问题，但是在强国，使用体验就很糟糕了，页面会在一段时间之后突然抖动一下，然后整个页面的字体就忽然变了。  为什么最后选择了classic? hugo的主题看似多样，其实能称心如意的并不多。别看预览图漂亮，用起来就问题不断，要么是页面加载慢，要么是中文字体太丑。这其实也可以理解，毕竟大家都是用爱发电，没道理给你免费用的模板就能达到商业水准。可以推想，在开发时间相同的情况下，功能越复杂、页面越精致，那就越偏向于作者个人的需求，那么我们这些伸手党自然用起来就会觉得越别扭。
那还不如用那些最简洁的模板，这款classic就是其中之一，简单漂亮，加载快，再加上个人比较偏爱复古风格，恰好就是我心目中的NO.1。其实这么多模板看下来，有些页面完全冗余的，比如/home和/posts的功能都是展示文章列表，前者不过是多了几行没什么信息量的文字，完全可以去掉，只留下/-&amp;gt;/posts,/categories,/tags,最多再加个/about。
简单也有简单的好处。有些模板样式文件一大堆，自己想改个功能麻烦得要死。以classic为例，所有的样式文件加起来也不超过10个，代码逻辑清晰明了：
作为比较，看看even的样式文件（还有几个文件夹没展开）：
反正我的手脚指都用上也算不过来，可以想象要想自定义一些功能会多么头痛。就如同新入职接手别人的代码一样，我们总是希望历史代码越简单越好。毕竟用hugo这类工具总免不了折腾，选择简单清晰的模板在方便修改的同时还有助于理解hugo本身，而不至于陷入第三方配置的泥潭。
部署 想要搭建一个能在大陆正常访问的站点，还想不用承受犯罪嫌疑人般的待遇(指备案)，可以选择的方法其实不多。除非家里有矿，能配齐vps+国外域名，一般还是选择用免费的静态托管站点，流行的选择有两个，一个是github pages，一个是netlify。前者自然不必说，值得一提的是，netlify支持自动构建站点，只要写好markdown文件push到git服务器，netlify钩子就会自动构建出新版本的网页并部署。听起来很不错吧？但是之前我试用的时候，总是构建失败，看命令行似乎和hugo版本有关。实在是懒得折腾，而且要使用netlify要在博客目录下引入一些新的配置文件，在我看来是比较dirty的方法；再考虑到netlify随时可能被墙的风险，最后还是放弃了。
github pages自然不错，背靠github这棵大树，总不至于被墙，毕竟国内的“自主研发”可全靠这个了，要是被墙，一大票的码农都得骂街吧。但是submodule的方式总是有点麻烦，虽然能用hugo官方提供的deploy.sh，脚本能跑起来，但是用了几次之后就会莫名其妙地将public文件夹add进主项目然后推送到github，本应该更新的github pages仓库就一直停留在上一个版本。我也不知道什么原因，可能什么误操作，反正最后处理起来很蛋疼，要先删除remote上的public，然后重新add submodule，烦不胜烦，现在就暂时先用着，等再遇到了的时候，仔细排查吧。</description>
    </item>
    
  </channel>
</rss>
